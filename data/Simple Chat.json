{
    "securityId": "aidevsuite_a1b2c3",
    "name": "Simple Chat",
    "code": "await setStatus(\"Ready to chat\"); // Set status as flavor\n// Show input box for the user to enter their prompt\nconst promptInput = createInput(textInputType, { // Add text input to allow user to input their prompt\n    placeholder: \"Enter your prompt here...\", // Add placeholder to better communicate with the user\n});\nawait show(promptInput, { noAccept: true }); // Show the input without an accept button, so we can reuse it.\n\nconst context = []; // Define context to pass to chatbot\nasync function run() { // Define run function to be called on chat button click\n    const prompt = (await read(promptInput.id)).text; // Read text value of prompt input\n    context.push(toUserMessage(prompt)); // Add user prompt to chat context\n\n    const userMessageElement = createText(paragraphType, `User:\\n${prompt}`, { bordered: true }); // Add border to user message to make it easier for the user to see in the sea of messages\n    await show(userMessageElement, { insertBefore: promptInput.id }); // Insert before prompt input, as that should stay at the bottom.\n    const assistantMessageElement = createMarkdown(\"\"); // Show assistant message in markdown to make it more appealing\n    await show(assistantMessageElement, { insertBefore: promptInput.id }); // Insert before prompt input, as that should stay at the bottom.\n\n    const result = await chat(context, { id: assistantMessageElement.id }); // Chat and stream to the last assistant message element.\n    context.push(toAssistantMessage(result)); // Save assistant response to chat context\n}\n\nconst button = createButton(createText(paragraphType, \"Chat\"), run); // Button that calls run() on click\nconst wrapper = createFloatRightWrapper(button); // Make chat button float to the right\nawait show(wrapper); // Show the button\n\nawait forever(); // Never finish the script",
    "link": "simple_chat"
}