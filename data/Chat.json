{"securityId":"aidevsuite_a1b2c3","name":"Chat","code":"await setStatus(\"Ready to chat\"); // Set status as flavor\n\n// Show input box for the user to enter their prompt\nconst promptInput = createInput(textInputType, {\n    placeholder: \"Enter your prompt here...\",\n});\nshow(promptInput, { noAccept: true });\n\nconst context = [];\n\nasync function run() {\n    const prompt = (await read(promptInput.id)).text;\n    context.push(toUserMessage(prompt));\n\n    const userMessageElement = createText(paragraphType, `User:\\n${prompt}`, { bordered: true });\n    await show(userMessageElement, { insertBefore: promptInput.id });\n    const assistantMessageElement = createMarkdown(\"\");\n    await show(assistantMessageElement, { insertBefore: promptInput.id });\n\n    const result = await chat(context, { id: assistantMessageElement.id });\n    context.push(toAssistantMessage(result));\n}\n\nasync function exportContext() {\n    const content = JSON.stringify(context, null, 2);\n    await requestFileDownload(\"context.json\", commonMimeTypes.json, content);\n}\n\nasync function importContext() {\n    const importInput = createInput(fileInputType, {\n        allowedExtensions: [\".json\"],\n        selectDescription: \"Select context JSON file\",\n    });\n\n    try {\n        const { files } = await show(createGroup([\n            createTitle(\"Import Context\"),\n            importInput\n        ]), { location: dialogLocation });\n\n        const file = files[0];\n        const fileContent = file.text;\n\n        let importedContext;\n        try {\n            importedContext = JSON.parse(fileContent);\n        } catch (error) {\n            await setStatus(\"Failed to parse the JSON file. provide a valid context JSON file.\");\n            return;\n        }\n\n        context.length = 0;\n        for (const message of importedContext) {\n            context.push(message);\n            let displayMessage;\n\n            if (message.role === userRole) {\n                displayMessage = createText(paragraphType, `User:\\n${message.prompt}`, { bordered: true });\n            } else if (message.role === assistantRole) {\n                displayMessage = createMarkdown(`Assistant:\\n${message.prompt}`);\n            }\n\n            if (displayMessage) {\n                await show(displayMessage, { insertBefore: promptInput.id });\n            }\n        }\n\n        await setStatus(\"Context imported successfully.\");\n\n    } catch (error) {\n        await setStatus(\"Import canceled.\");\n    }\n}\n\nconst chatButton = createButton(createText(paragraphType, \"Chat\"), run);\nconst exportButton = createButton(createText(paragraphType, \"Export Context\"), exportContext);\nconst importButton = createButton(createText(paragraphType, \"Import Context\"), importContext);\n\nconst buttonBar = createHorizontalList([exportButton, importButton], { gap: 2 });\nawait show(buttonBar, { insertBefore: promptInput.id }); // Show the import/export buttons above the prompt\n\nawait show(chatButton, { insertAfterInstead: true, insertBefore: promptInput.id }); // Show the chat button below the prompt\n\nawait forever();\n","link":"chat"}