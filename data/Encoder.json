{"securityId":"aidevsuite_a1b2c3","name":"Encoder","code":"await setStatus(\"Ready to encode/decode\");\n\nconst encodingOptions = [\n    { value: 'uri', name: 'URI' },\n    { value: 'uriComponent', name: 'URI Component' },\n    { value: 'html', name: 'HTML' },\n    { value: 'json', name: 'JSON' },\n    { value: 'base64', name: 'Base64' },\n    { value: 'regex', name: 'Regex' },\n];\nconst actionOptions = [\n    { value: 'encode', name: 'Encode' },\n    { value: 'decode', name: 'Decode' },\n];\n\n// Create elements\nconst encodingSelect = createInput(selectInputType, {\n    choices: encodingOptions,\n    defaultValue: 'uri',\n    onValidate: updateOutput,\n});\nconst actionSelect = createInput(selectInputType, {\n    choices: actionOptions,\n    defaultValue: 'encode',\n    onValidate: updateOutput,\n});\nconst inputText = createInput(textInputType, {\n    placeholder: \"Enter text here...\",\n    onValidate: updateOutput,\n});\nconst outputText = createParagraph(null, {\n    placeholder: \"Output will be shown here...\",\n    bordered: true,\n});\n\nconst swapButton = createButton(\n    createText(paragraphType, \"Swap\"),\n    () => swapSelections()\n);\n\n// Create containers\nconst topBar = createNavBar([\n    encodingSelect,\n    createEmpty(),\n    actionSelect\n]);\n\nconst mainGroup = createGroup([\n    topBar,\n    inputText,\n    outputText,\n    createFloatRightWrapper(swapButton)\n]);\n\nasync function updateOutput() {\n    const input = (await read(inputText.id)).text;\n    const encoding = (await read(encodingSelect.id)).value;\n    const action = (await read(actionSelect.id)).value;\n    let output;\n    try {\n        if (action === 'encode') {\n            output = encode(input, encoding);\n        } else {\n            output = decode(input, encoding);\n        }\n    } catch (error) {\n        output = `Error: ${error.message}`;\n    }\n    await update(outputText.id, { text: output });\n}\n\nfunction encode(input, encoding) {\n    switch (encoding) {\n        case 'uri': return encodeURI(input);\n        case 'uriComponent': return encodeURIComponent(input);\n        case 'html': return escapeHTML(input);\n        case 'json': return JSON.stringify(input);\n        case 'base64': return btoa(input);\n        case 'regex': return escapeRegex(input);\n        default: throw new Error('Unsupported encoding');\n    }\n}\n\nfunction decode(input, encoding) {\n    switch (encoding) {\n        case 'uri': return decodeURI(input);\n        case 'uriComponent': return decodeURIComponent(input);\n        case 'html': return unescapeHTML(input);\n        case 'json': return JSON.parse(input);\n        case 'base64': return atob(input);\n        case 'regex': return unescapeRegex(input);\n        default: throw new Error('Unsupported encoding');\n    }\n}\n\nasync function swapSelections() {\n    const encoding = (await read(encodingSelect.id)).value;\n    const action = (await read(actionSelect.id)).value;\n    await update(encodingSelect.id, { value: action === 'encode' ? 'decode' : 'encode' });\n    await update(actionSelect.id, { value: encoding });\n    await updateOutput();\n}\n\n// Show all the elements together\nawait show(mainGroup, { noAccept: true });\nawait forever();\n","link":"encoder"}